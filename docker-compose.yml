version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"   
      - "19092:19092" 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    command: >
      bash -c "
        /etc/confluent/docker/run & 
        echo 'Waiting for Kafka startup...'; sleep 15; 
        kafka-topics --create --topic analytics --bootstrap-server kafka:19092 --replication-factor 1 --partitions 1 || true; 
        wait
      "
    networks:
      - backend
    restart: unless-stopped
    

  link_postgres:
    container_name: link_postgres_container
    image: postgres:15
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    ports:
      - "5433:5432"
    networks:
      - backend
    volumes:
      - link_pgdata:/var/lib/postgresql/data
      - ./link/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  link_pgadmin:
    container_name: link_pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: link@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:5050"
    networks:
      - backend
    restart: unless-stopped

  analytics_postgres:
    container_name: analytics_postgres_container
    image: postgres:15
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    ports:
      - "5444:5432"
    networks:
      - backend
    volumes:
      - analytics_pgdata:/var/lib/postgresql/data
      - ./analytics/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  analytics_pgadmin:
    container_name: analytics_pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: analytics@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5150:5050"
    networks:
      - backend
    restart: unless-stopped
  
  link_migrator:
    image: postgres:15
    depends_on:
      - link_postgres
    environment:
      PGPASSWORD: 123
    volumes:
      - ./LinkService/internal/migrators:/migrations
    entrypoint: >
      bash -c "
      until pg_isready -h link_postgres_container -p 5432 -U postgres; do
        echo 'Waiting for link_postgres...'; sleep 2;
      done;
      psql -h link_postgres_container -U postgres -d postgres -f /migrations/001_links_table.up.sql
      "
    networks:
      - backend

  analytics_migrator:
    image: postgres:15
    depends_on:
      - analytics_postgres
    environment:
      PGPASSWORD: 123
    volumes:
      - ./AnalyticsService/internal/migrators:/migrations
    entrypoint: >
      bash -c "
      until pg_isready -h analytics_postgres_container -p 5432 -U postgres; do
        echo 'Waiting for analytics_postgres...'; sleep 2;
      done;
      psql -h analytics_postgres_container -U postgres -d analytics -f /migrations/001_links_clicks_table.up.sql
      "
    networks:
      - backend
  
  linkservice:
    build:
      context: ./LinkService
    ports:
      - "10800:10800"
    depends_on:
      - link_postgres
    networks:
      - backend
    restart: unless-stopped

  analyticsservice:
    build:
      context: ./AnalyticsService
    ports:
      - "1080:1080"
    depends_on:
      - analytics_postgres
    networks:
      - backend
    restart: unless-stopped

  api:
    build:
      context: ./API
    ports:
      - "18080:18080"
    depends_on:
      - linkservice
      - analyticsservice
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  link_pgdata:
  analytics_pgdata:
